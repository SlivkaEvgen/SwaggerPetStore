package org.example.repository;import com.google.gson.Gson;import lombok.SneakyThrows;import okhttp3.*;import org.example.config.HttpConnect;import org.example.model.Order;import org.example.repository.interfaces.StoreRepository;import org.example.util.PropertiesLoader;import java.net.URI;public class StoreRepositoryImpl implements StoreRepository {  private final OkHttpClient OK_CLIENT = HttpConnect.getInstance();  private final String URI_STORE = PropertiesLoader.getProperties("uriStore");  private final Gson GSON = new Gson();  // 200 delete by id  @SneakyThrows  @Override  public Integer deleteOrderById(Integer orderId) {    URI uri = URI.create(URI_STORE + "/order/" + orderId);    Request request = new Request.Builder().url(HttpUrl.get(uri)).delete().build();    Response response = OK_CLIENT.newCall(request).execute();    return response.code();  }  // 200 find by ID  @SneakyThrows  @Override  public Order findOrderById(Integer orderId) {    URI uri = URI.create(URI_STORE + "/order/" + orderId);    Request request = new Request.Builder().url(HttpUrl.get(uri)).build();    Response response = OK_CLIENT.newCall(request).execute();    return GSON.fromJson(response.body().string(), Order.class);  }  // 200 place  @SneakyThrows  @Override  public Integer placeAnOrderForAPet(Order order) {    URI uri = URI.create(URI_STORE + "/order");    RequestBody requestBody =        new Request.Builder()            .url(HttpUrl.get(uri))            .post(                RequestBody.create(                    MediaType.parse("application/json; charset=utf-8"), GSON.toJson(order)))            .header("Content-type", "application/json")            .build()            .body();    Response response =        OK_CLIENT            .newCall(new Request.Builder().url(HttpUrl.get(uri)).post(requestBody).build())            .execute();    return response.code();  }  // 200 inventories  @SneakyThrows  @Override  public Integer returnsPetInventoriesByStatus() {    URI uri = URI.create(URI_STORE + "/inventory");    Request request = new Request.Builder().url(HttpUrl.get(uri)).get().build();    Response response = OK_CLIENT.newCall(request).execute();    System.out.println(response.body().string() + "\n");    return response.code();  }}