package org.example.repository;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import lombok.SneakyThrows;import okhttp3.*;import org.example.config.HttpConnect;import org.example.model.Category;import org.example.model.Order;import org.example.model.Pet;import org.example.model.Tag;import org.example.repository.interfaces.PetRepository;import org.example.util.PropertiesLoader;import java.io.File;import java.lang.reflect.GenericArrayType;import java.lang.reflect.Type;import java.net.URI;import java.nio.charset.StandardCharsets;import java.util.*;public class PetRepositoryImpl implements PetRepository {  private final OkHttpClient OK_CLIENT = HttpConnect.getInstance();  private final String URI_PET = PropertiesLoader.getProperties("uriPet");  private final Gson GSON = new Gson();  @SneakyThrows  @Override  public Integer uploadImage(File file, Integer petId) {    RequestBody requestBody =        new MultipartBody.Builder()            .setType(MultipartBody.FORM)            .addFormDataPart(                "file", file.getName(), RequestBody.create(MediaType.parse("image/png"), file))            .build();    Response response =        OK_CLIENT            .newCall(new Request.Builder().post(requestBody).url(HttpUrl.get(URI.create(URI_PET + "/" + petId + "/uploadImage"))).build())            .execute();    System.out.println("uploadFile $  " + response.body().string());    return response.code();  }  @SneakyThrows  @Override  public Integer delete(Integer petId) {    Request request = new Request.Builder().url(HttpUrl.get(URI.create(URI_PET + "/" + petId))).delete().build();    Response response = OK_CLIENT.newCall(request).execute();    return response.code();  }  @SneakyThrows  @Override  public Integer findPetByStatus(String status) {    Request request = new Request.Builder().url(HttpUrl.get(URI.create(URI_PET + "/findByStatus?status=" + status))).get().build();    Response response = OK_CLIENT.newCall(request).execute();      System.out.println(response.body().string());      return response.code();  }  @SneakyThrows  @Override  public Pet create(Pet pet) {    RequestBody requestBody =        new Request.Builder()            .url(HttpUrl.get(URI.create(URI_PET)))            .post(                RequestBody.create(                    MediaType.parse("application/json; charset=utf-8"), GSON.toJson(pet)))            .header("Content-type", "application/json")            .build()            .body();    Response response =        OK_CLIENT            .newCall(new Request.Builder().url(HttpUrl.get(URI.create(URI_PET))).post(requestBody).build())            .execute();     //System.out.println("Create pet $ " + response.code());    return GSON.fromJson(response.body().string(), Pet.class);  }  // 200 update //id/name/status  @SneakyThrows  @Override  public Integer update(Pet pet, String petName) {    // https://petstore.swagger.io/v2/pet    URI uri = URI.create(URI_PET);    //    List<Tag> tagList = new ArrayList<>();    //    String[] fotosList = new String[10];    //    //    Category category = new Category();    //    category.setId(1);    //    category.setName("Category1");    //    //    Tag tag = new Tag();    //    tag.setId(1);    //    tag.setName("Tag1");    //    //    pet = new Pet();    //        pet.setId(2);    //        pet.setName("Pet1");    //        pet.setStatus("available");    //    pet.setCategory(category);    //    pet.setPhotoUrls(fotosList);    //    pet.setTags(tagList);    // Gson gson = new Gson();    // String toJson = GSON.toJson(pet);    RequestBody requestBody =        new Request.Builder()            .url(HttpUrl.get(uri))            .post(                RequestBody.create(                    MediaType.parse("application/json; charset=utf-8"), GSON.toJson(pet)))            .header("Content-type", "application/json")            .build()            .body();    Response response =        OK_CLIENT            .newCall(new Request.Builder().url(HttpUrl.get(uri)).post(requestBody).build())            .execute();    // System.out.println("Update pet $ " + response.code());    System.out.println("Update pet $ " + response.body().string());    response.close();    return response.code();  }  // 200  findPetById  @SneakyThrows  @Override  public Pet get(Integer petId) {    URI uri = URI.create(URI_PET + "/" + petId);    Request request = new Request.Builder().url(HttpUrl.get(uri)).get().build();    Response response = OK_CLIENT.newCall(request).execute();//     System.out.println("findByIDPet $ " + response.code());//    System.out.println("findByIDPet $ " + response.body().string());      String string = response.body().string();      assert response.body() != null;      return GSON.fromJson(string,Pet.class);  }//  public List<Pet> getPetsByStatus(URI uri, String status) {//    uri = URI.create(uri + "pet/findByStatus?status=" + status);//   // HttpRequest request = HttpRequest.newBuilder().uri(uri).GET().build();//   // final HttpResponse<String> response =//    //    HTTP_CLIENT.send(request, HttpResponse.BodyHandlers.ofString());//   // System.out.println("getPetsByStatus : " + response.statusCode());//   // return GSON.fromJson(response.body(), new TypeToken<List<Pet>>() {}.getType());//        }  // update  @SneakyThrows  @Override  public Integer updatePut(Pet pet) {    // https://petstore.swagger.io/v2/pet    URI uri = URI.create(URI_PET);    //    List<Tag> tagList = new ArrayList<>();    //    String[] fotosList = new String[10];    //    //    Category category = new Category();    //    category.setId(1);    //    category.setName("Category1");    //    //    Tag tag = new Tag();    //    tag.setId(1);    //    tag.setName("Tag1");    //    //    Pet pet = new Pet();    //    pet.setId(1);    //    pet.setName("Pet1");    //    pet.setStatus("200");    //    pet.setCategory(category);    //    pet.setPhotoUrls(fotosList);    //    pet.setTags(tagList);    // Gson gson = new Gson();    // String toJson = gson.toJson(pet);    //    RequestBody requestBody =        new Request.Builder()            .url(HttpUrl.get(uri))            .put(                RequestBody.create(                    MediaType.parse("application/json; charset=utf-8"), GSON.toJson(pet)))            //            .header("formData", "name")            //            .header("formData", "status")            //            .addHeader("name", "pet2")            //            .addHeader("status", "200")            .build()            .body();    Response response =        OK_CLIENT            .newCall(new Request.Builder().url(HttpUrl.get(uri)).post(requestBody).build())            .execute();    // Request request = new Request.Builder().url(HttpUrl.get(uri)).get().build();    // Response response = OK_CLIENT.newCall(requestBody).execute();    // System.out.println("Update by name and status pet $ " + response.code());//    System.out.println("update PUT $ " + response.code() + " - " + response.body().string());    return response.code();  }}